---
description: Rule for editing and creating UI with HTML, CSS and JS
globs: *.html, *.css
alwaysApply: false
---
# General
- Make simple layout using modern html and css best practices
- Make sure the layout is responsive

# Styling
- Use [style.css](mdc:src/static/css/style.css) for global styling (colors, common button styling, other re-usable components)
- Do NOT inline styles
- For component (html page) specific styling use <style> tag to keep it simple, but make it easy to move to dedicated css file
- Make sure to use consistent styling, re-use existing styles to keep the UI consistent and not create duplicates

 # Examples

## Example 1: Using style.css instead of inline styles
❌ Incorrect (inline styles):
```html
<div style="color: red; margin: 10px; font-weight: bold;">Error message</div>
```

✅ Correct (using style.css):
```html
<div class="error-message">Error message</div>
```

In style.css:
```css
.error-message {
  color: red;
  margin: 10px;
  font-weight: bold;
}
```

## Example 2: Consistent styling and avoiding duplicates
❌ Incorrect (duplicate styles):
```css
.button-primary {
  background-color: blue;
  color: white;
  padding: 10px 15px;
  border-radius: 4px;
}

.submit-button {
  background-color: blue;
  color: white;
  padding: 10px 15px;
  border-radius: 4px;
}
```

✅ Correct (reusing styles):
```css
.button {
  padding: 10px 15px;
  border-radius: 4px;
}

.button-primary {
  background-color: blue;
  color: white;
}

.button-secondary {
  background-color: gray;
  color: white;
}
```

## Example 3: Responsive layout
❌ Incorrect (fixed width):
```css
.main-content {
  width: 960px;
}
```

✅ Correct (responsive):
```css
.main-content {
  width: 100%;
  max-width: 960px;
  margin: 0 auto;
}

@media (max-width: 768px) {
  .row {
    flex-direction: column;
  }
  
  .column {
    flex: none;
    width: 100%;
  }
}